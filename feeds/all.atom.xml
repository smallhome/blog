<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>small home</title><link href="/" rel="alternate"></link><link href="/feeds/all.atom.xml" rel="self"></link><id>/</id><updated>2015-07-25T00:00:00+08:00</updated><entry><title>recovery调试方法</title><link href="/recoverydiao-shi-fang-fa.html" rel="alternate"></link><updated>2015-07-25T00:00:00+08:00</updated><author><name>smallhome</name></author><id>tag:,2015-07-25:recoverydiao-shi-fang-fa.html</id><summary type="html">&lt;h2&gt;问题的来由&lt;/h2&gt;
&lt;p&gt;recovery里面调试不能进shell,抓取log只有当recovery执行完成退出时才能保存下来。我们现在要达到两个目标:&lt;/p&gt;
&lt;p&gt;1.即使recovery没有执行完成,依然可以保存下来log信息&lt;/p&gt;
&lt;p&gt;2.添加adb shell环境,方便使用android提供的一些调试工具&lt;/p&gt;
&lt;h2&gt;修改log机制&lt;/h2&gt;
&lt;p&gt;recovery程序从boogloader/recovery下的程序生成的,在recovery的main函数里,将标准输出,标准出错输出通过freopen&lt;/p&gt;
&lt;p&gt;重定向到了/tmp/recovery.log,只有当程序执行结束时会将文件拷贝到cache分区&lt;/p&gt;
&lt;p&gt;1.修改标准输出,标准出错输出重定向到/cache/recovery.log文件;&lt;/p&gt;
&lt;p&gt;2.在recovery里面,挂在文件系统是在程序执行过程中而不是在fstab中,所以重定向到cache中的文件前,先挂载cache分区&lt;/p&gt;
&lt;p&gt;3.通过freopen重定向时,mode参数传入"a",则将log加入到log文件末尾;如果传入"w",则将log清楚掉重新从文件头开始写入;&lt;/p&gt;
&lt;p&gt;4.当系统卡死时通过烧写misc.img可以快速进入ftm并获取root权限(进入ftm模式时我们添加了root权限)&lt;/p&gt;
&lt;p&gt;扩展:我们可以将以上方法扩展开来,在第一个用户程序init中将cache分区挂载上,然后重定向标准输出,标准出错到/cache/startup.log中,还可以根据&lt;/p&gt;
&lt;p&gt;ftm,recovery,charge下的不同属性,来作一些特殊的抓取log需求:抓取第一次刷完版本log,recovery升完级的log,第一次恢复出场设置log等&lt;/p&gt;
&lt;h2&gt;搭建adb shell环境&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;添加adb shell功能&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;1.挂在system分区&lt;/p&gt;
&lt;p&gt;2.设置PATH环境变量添加/system/bin和/system/xbin&lt;/p&gt;
&lt;p&gt;3.启动adbd,且设置为正常模式而不是recovery模式&lt;/p&gt;
&lt;p&gt;4.设置usb vid,pid,usb config等属性,并设置enable为1&lt;/p&gt;
&lt;p&gt;在恢复出场设置或者升级过程中和升级系统时,需要卸载掉system,否则将无法恢复出场设置或者升级;所以我们需要进一步提出另外的方案&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;不改变分区方案的方法&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;1.交叉编译busybox和sh,strace等工具,选择静态链接的方式编译,直接将需要的程序放在/sbin下;修改PATH路径&lt;/p&gt;
&lt;p&gt;2.修改adbd的service文件,将调用sh的路径指向/sbin/sh&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;添加boot和recovery分区大小&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;1.我们可以扩大root和recovery分区的大小,在其中建立system/bin和system/lib目录,然后将需要的lib和bin文件拷贝到对应文件夹下,其中linker和sh&lt;/p&gt;
&lt;p&gt;是必须包含的&lt;/p&gt;
&lt;p&gt;2.挂在system分区时,会将/system里面的内容覆盖掉;如果不将我们的环境放在/system目录,除了修改PATH变量和sh路径外,还需要修改linker动态库链接程&lt;/p&gt;
&lt;p&gt;序中动态库存放的目录&lt;/p&gt;
&lt;h2&gt;问题反馈之联系方式&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;邮件(smallhome2015@hotmail.com)&lt;/li&gt;
&lt;li&gt;技术博客: smallhome.github.io/blog&lt;/li&gt;
&lt;/ul&gt;</summary></entry><entry><title>如何搭建github博客</title><link href="/ru-he-da-jian-githubbo-ke.html" rel="alternate"></link><updated>2015-07-22T00:00:00+08:00</updated><author><name>smallhome</name></author><id>tag:,2015-07-22:ru-he-da-jian-githubbo-ke.html</id><summary type="html">&lt;h2&gt;Github帐户相关&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;一定要作邮箱验证,否则github pages无法访问;且不能使用163之类的邮箱,我注册了hotmail邮箱才收到验证邮件&lt;/li&gt;
&lt;li&gt;git访问要通过ssh验证,通过ssh-keygen产生PC上的ssh keys,然后添加到github的ssh keys栏中即可&lt;/li&gt;
&lt;li&gt;git config设置git用户,邮箱等信息&lt;/li&gt;
&lt;li&gt;如果git push依然不成功,可以使用http协议来clone代码和提交内容&lt;/li&gt;
&lt;li&gt;新建repositories,自动新建github pages,新建一个source branch,用来存储md文件&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;建立gentoo环境&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;emerge git,pelican,extext工具,解决依赖关系&lt;/li&gt;
&lt;li&gt;pelican-quickstart建立基本博客环境&lt;blockquote&gt;
&lt;p&gt;myblog&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;├── content # 存放输入的源文件&lt;/p&gt;
&lt;p&gt;│ └── (pages) # 存放手工创建的静态页面&lt;/p&gt;
&lt;p&gt;├── output # 生成的输出文件&lt;/p&gt;
&lt;p&gt;├── develop_server.sh # 方便开启测试服务器&lt;/p&gt;
&lt;p&gt;├── Makefile # 方便管理博客的Makefile&lt;/p&gt;
&lt;p&gt;├── pelicanconf.py # 主配置文件&lt;/p&gt;
&lt;p&gt;└── publishconf.py # 发布时使用的配置文件&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;使用extext写好的md文档放入content目录,执行make html&lt;/li&gt;
&lt;li&gt;make devserver执行成功后可以在http://localhost:8000查看博客&lt;/li&gt;
&lt;li&gt;./develop_server.sh stop停止浏览功能&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;提交静态网页&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;git clone在github上的代码,git rm . -rf&lt;/li&gt;
&lt;li&gt;将pelican产生的output目录下的内容mv到git目录下&lt;/li&gt;
&lt;li&gt;git add .;git commit -am "first commit";git push&lt;/li&gt;
&lt;li&gt;在github中将main分之切换成source分之,将除了output之外的其他内容cp到该git目录下并提交&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;问题反馈之联系方式&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;邮件(smallhome@hotmail.com)&lt;/li&gt;
&lt;li&gt;博客: smallhome.github.io/blog&lt;/li&gt;
&lt;/ul&gt;</summary></entry></feed>